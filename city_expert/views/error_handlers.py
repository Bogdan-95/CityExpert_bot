from telegram import Update
from telegram.ext import ContextTypes
from loguru import logger
from typing import Optional
from enum import Enum, auto
from city_expert.utils.config_loader import config

# ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
ADMIN_CHAT_ID = config.ADMIN_CHAT_ID


class ErrorType(Enum):
    """–ü–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏"""
    DATABASE = auto()  # –û—à–∏–±–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    API = auto()  # –û—à–∏–±–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö API
    VALIDATION = auto()  # –û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö
    NETWORK = auto()  # –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é
    UNKNOWN = auto()  # –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏


class ErrorHandler:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –±–æ—Ç–∞"""

    # –°–æ–æ–±—â–µ–Ω–∏—è –∏ —Ç–µ–≥–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫
    ERROR_MESSAGES = {
        ErrorType.DATABASE: (
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "database_error",
        ),
        ErrorType.API: (
            "‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            "api_error",
        ),
        ErrorType.VALIDATION: (
            "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ.",
            "validation_error",
        ),
        ErrorType.NETWORK: (
            "‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.",
            "network_error",
        ),
        ErrorType.UNKNOWN: (
            "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.",
            "unknown_error",
        ),
    }

    @staticmethod
    async def handle(
            update: Update,
            _: ContextTypes.DEFAULT_TYPE,
            error: Exception,
            error_type: Optional[ErrorType] = None,
    ) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫.

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram
            _: –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
            error: –í–æ–∑–Ω–∏–∫—à–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
            error_type: –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏ (–µ—Å–ª–∏ None - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        """
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω
            error_type = error_type or ErrorHandler.detect_error_type(error)
            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ç–µ–≥ –¥–ª—è –ª–æ–≥–æ–≤
            message, log_tag = ErrorHandler.ERROR_MESSAGES[error_type]

            # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º
            logger.opt(lazy=True).error(
                "[{tag}] Error in update {update_id}: {error}",
                tag=log_tag,
                update_id=lambda: update.update_id if update else None,
                error=lambda: str(error),
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            if update and update.effective_message:
                from city_expert.views.keyboards import get_main_keyboard
                await update.effective_message.reply_text(
                    message,
                    reply_markup=get_main_keyboard()
                )

        except Exception as handler_error:
            # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–∞–º–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            logger.critical(f"CRITICAL: Error handler failure: {handler_error}")

    @staticmethod
    def detect_error_type(error: Exception) -> ErrorType:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–∏–ø –æ—à–∏–±–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –µ—ë —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ.

        Args:
            error: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞

        Returns:
            ErrorType: –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —Ç–∏–ø –æ—à–∏–±–∫–∏
        """
        error_str = str(error).lower()

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏ –æ–± –æ—à–∏–±–∫–µ
        if any(db_word in error_str for db_word in ["database", "sql", "query", "sqlite"]):
            return ErrorType.DATABASE
        elif any(api_word in error_str for api_word in ["api", "http", "request", "response"]):
            return ErrorType.API
        elif any(net_word in error_str for net_word in ["connection", "network", "timeout", "socket"]):
            return ErrorType.NETWORK
        elif any(val_word in error_str for val_word in ["validation", "invalid", "validate", "value"]):
            return ErrorType.VALIDATION

        return ErrorType.UNKNOWN


async def global_error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """
    –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è Telegram –±–æ—Ç–∞.

    Args:
        update: –û–±—ä–µ–∫—Ç Update –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –æ–±—ä–µ–∫—Ç
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—à–∏–±–∫–µ
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ Update –æ—Ç Telegram
        if not isinstance(update, Update):
            logger.error("Received error without Update object")
            return

        # –î–µ–ª–µ–≥–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—Å–Ω–æ–≤–Ω–æ–º—É –∫–ª–∞—Å—Å—É
        await ErrorHandler.handle(update, context, context.error)

    except Exception as e:
        # –õ–æ–≥–∏—Ä—É–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
        logger.critical(f"FATAL: Global error handler failure: {e}")

        # –ü—ã—Ç–∞–µ–º—Å—è —É–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –µ—Å–ª–∏ –±–æ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω
        if context.bot and hasattr(context.bot, "send_message"):
            await context.bot.send_message(
                chat_id=ADMIN_CHAT_ID,
                text=f"üî• Critical bot error: {str(e)[:1000]}",  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è
            )