from telegram.helpers import escape_markdown
from city_expert.models import SearchModel
from city_expert.services.places_api import Place
from typing import List


def format_search_results(results: List[Place]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –º–µ—Å—Ç –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Markdown.

    Args:
        results: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Place —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

    –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
        üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:
        üèõ –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
        üìç –ê–¥—Ä–µ—Å
        ‚≠ê –†–µ–π—Ç–∏–Ω–≥
        üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: —à–∏—Ä–æ—Ç–∞, –¥–æ–ª–≥–æ—Ç–∞
        ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    """
    if not results:
        return "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ üòï\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å"

    formatted = ["üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n"]  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π

    for place in results[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 5 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        # –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2
        name = escape_markdown(place.name, version=2)
        address = escape_markdown(place.address, version=2)

        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        rating = f"‚≠ê {place.rating:.1f}" if place.rating else "‚≠ê –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ
        formatted.append(
            f"üèõ *{name}*\n"  # –ñ–∏—Ä–Ω—ã–π —à—Ä–∏—Ñ—Ç –¥–ª—è –Ω–∞–∑–≤–∞–Ω–∏—è
            f"üìç {address}\n"
            f"{rating}\n"
            f"üåê –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: {place.latitude:.6f}, {place.longitude:.6f}\n"
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
        )

    return "\n".join(formatted)


def format_history(history: List[SearchModel]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Markdown.

    Args:
        history: –°–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ SearchModel —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—Ä–æ—Å–æ–≤

    Returns:
        –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –µ—ë –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏

    –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞:
        üìÜ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:
        1. –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
           üïí –î–∞—Ç–∞ | üìç –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã | üèô –ù–∞–π–¥–µ–Ω–æ: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
           ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ
    """
    if not history:
        return "üì≠ –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞"


    formatted = ["üìÜ *–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤:*\n"]  # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π

    for idx, record in enumerate(history, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        date = record.created_at.strftime("%d.%m.%Y %H:%M")

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        results = record.results_count()
        count = len(results) if results else 0

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç (–µ—Å–ª–∏ –µ—Å—Ç—å)
        location = ""
        if record.latitude and record.longitude:
            location = f" | üìç {record.latitude:.4f}, {record.longitude:.4f}"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–ø—Ä–æ—Å–µ
        formatted.append(
            f"{idx}. *{escape_markdown(record.query, version=2)}*\n"  # –ñ–∏—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            f"   üïí {date}{location} | üèô –ù–∞–π–¥–µ–Ω–æ: {count}\n"
            "   ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"  # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Å –æ—Ç—Å—Ç—É–ø–æ–º
        )

    return "\n".join(formatted)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏