from typing import Optional
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ContextTypes,
    CommandHandler,
    MessageHandler,
    filters as ft,
    CallbackQueryHandler,
    Application,
)
from loguru import logger
from city_expert.services.places_api import Place, PlacesAPI
from city_expert.models import User, SearchModel, FavoritePlace
from datetime import datetime
from math import radians, sin, cos, sqrt, atan2



class SearchController:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç –≤ Telegram –±–æ—Ç–µ."""

    def __init__(self, app: Application, api: PlacesAPI):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞.

        Args:
            app: –≠–∫–∑–µ–º–ø–ª—è—Ä Application –∏–∑ python-telegram-bot
            api: API –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç
        """
        self.app = app
        self.api = api
        self._register_handlers()

    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π."""
        handlers = [
            CommandHandler("start", self._start),
            CommandHandler("help", self._help),
            CommandHandler("history", self._show_history),
            CommandHandler("favorites", self._show_favorites),
            MessageHandler(ft.Text(["üìç –†—è–¥–æ–º —Å–æ –º–Ω–æ–π"]), self._search_nearby),
            MessageHandler(ft.Text(["üìñ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞"]), self._show_history),
            MessageHandler(ft.Text(["‚ùì –ü–æ–º–æ—â—å"]), self._help),
            MessageHandler(ft.Text(["üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π"]), self._start_search),
            MessageHandler(ft.Text(["‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é"]), self._back_to_menu),
            MessageHandler(ft.LOCATION, self._handle_location),
            CallbackQueryHandler(self._handle_button_click, pattern="^(map|fav|unfav):"),
            MessageHandler(ft.TEXT & ~ft.COMMAND, self._handle_text_search),
        ]
        for handler in handlers:
            self.app.add_handler(handler)

    @staticmethod
    def _get_main_keyboard() -> ReplyKeyboardMarkup:
        """ –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é —Å –≥–ª–∞–≤–Ω—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏.

        Returns:
            ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
                - –†—è–¥–æ–º —Å–æ –º–Ω–æ–π
                - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞
                - –ü–æ–º–æ—â—å
                - –ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π
        """

        return ReplyKeyboardMarkup(
            [
                [KeyboardButton("üìç –†—è–¥–æ–º —Å–æ –º–Ω–æ–π"), KeyboardButton("üìñ –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")],
                [KeyboardButton("‚ùì –ü–æ–º–æ—â—å"), KeyboardButton("üîç –ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,  # –°–∫—Ä—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        )

    @staticmethod
    def _get_location_keyboard() -> ReplyKeyboardMarkup:
        """ –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏.

        Returns:
            ReplyKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
                - –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é (—Å –∑–∞–ø—Ä–æ—Å–æ–º –ª–æ–∫–∞—Ü–∏–∏)
                - –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é
        """

        return ReplyKeyboardMarkup(
            [
                [KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", request_location=True)],
                [KeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é")],
            ],
            resize_keyboard=True,
            one_time_keyboard=True,
        )

    @staticmethod
    async def _start(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        """

        await update.message.reply_text(
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –º–µ–Ω—é –Ω–∏–∂–µ üëá",
            reply_markup=SearchController._get_main_keyboard(),
        )

    @staticmethod
    async def _help(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
        help_text = (
            "üìå –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
            "/history - –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞\n"
            "/favorites - –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞!"
        )
        await update.message.reply_text(
            help_text, reply_markup=SearchController._get_main_keyboard()
        )

    @staticmethod
    async def _search_nearby(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —Ä—è–¥–æ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        """

        await update.message.reply_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä—è–¥–æ–º!",
            reply_markup=SearchController._get_location_keyboard(),
        )

    @staticmethod
    async def _back_to_menu(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'."""
        await update.message.reply_text(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=SearchController._get_main_keyboard(),
        )

    @staticmethod
    async def _start_search(update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ–∏—Å–∫ –¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–µ–π'.
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        """
        await update.message.reply_text(
            "üîç –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ!",
            reply_markup=SearchController._get_main_keyboard(),
        )

    async def _show_favorites(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.get_or_create(
                telegram_id=update.effective_user.id,
                defaults={
                    "full_name": update.effective_user.full_name,
                    "username": update.effective_user.username,
                },
            )[0]

            # –ü–æ–ª—É—á–∞–µ–º –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —Å–Ω–∞—á–∞–ª–∞)
            favorites = FavoritePlace.select().where(
                FavoritePlace.user == user
            ).order_by(FavoritePlace.added_at.desc())

            if not favorites:
                await update.message.reply_text(
                    "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç",
                    reply_markup=self._get_main_keyboard(),
                )
                return

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç —Å HTML-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            response = "‚≠ê <b>–ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—Ç–∞:</b>\n\n"
            for fav in favorites:
                response += (
                    f"üèõ <b>{fav.name}</b>\n"
                    f"üìÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {fav.added_at.strftime('%d.%m.%Y')}\n"
                    f"üìç <a href='https://www.google.com/maps?q={fav.place_id}'>–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ</a>\n\n"
                )

            await update.message.reply_text(
                response,
                parse_mode="HTML",
                disable_web_page_preview=True,
                reply_markup=self._get_main_keyboard(),
            )

        except Exception as e:
            logger.error(f"Favorites error: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–µ—Å—Ç",
                reply_markup=self._get_main_keyboard(),
            )

    async def _handle_button_click(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫ (–∫–∞—Ä—Ç–∞, –∏–∑–±—Ä–∞–Ω–Ω–æ–µ).

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        """
        query = update.callback_query
        await query.answer()

        try:
            if not query.data or ":" not in query.data:
                raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç callback –¥–∞–Ω–Ω—ã—Ö")

            # –†–∞–∑–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ callback_data (—Ñ–æ—Ä–º–∞—Ç: "action:param1:param2")

            action, *payload = query.data.split(":")
            user = User.get(telegram_id=query.from_user.id)

            if action == "map":
                lat, lon = payload[0].split(",")
                maps_url = f"https://www.google.com/maps?q={lat},{lon}"
                await query.message.reply_text(
                    f"üìç –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps:\n{maps_url}",
                    disable_web_page_preview=True
                )

            elif action in ("fav", "unfav"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                coords, name = payload[0], ":".join(payload[1:])
                lat, lon = coords.split(",")
                place_id = f"{lat},{lon}"

                if action == "fav":
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ
                    FavoritePlace.create(
                        user=user,
                        place_id=place_id,
                        name=name,
                        added_at=datetime.now()
                    )
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ"
                    await query.edit_message_reply_markup(
                        reply_markup=self._create_place_keyboard(place_id, name, user, True)
                    )
                else:
                    # –£–¥–∞–ª—è–µ–º –º–µ—Å—Ç–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                    FavoritePlace.delete().where(
                        (FavoritePlace.user == user) &
                        (FavoritePlace.place_id == place_id)
                    ).execute()
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞ "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"

                    await query.edit_message_reply_markup(
                        reply_markup=self._create_place_keyboard(place_id, name, user, False)
                    )

        except Exception as e:
            logger.error(f"Button click error: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

    async def _handle_location(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram
        """
        if not update.message or not update.message.location:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
            return

        location = update.message.location
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—É—á–µ–Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {location.latitude}, {location.longitude}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            User.get_or_create(
                telegram_id=user_id,
                defaults={
                    "full_name": update.effective_user.full_name,
                    "username": update.effective_user.username,
                },
            )

            await update.message.reply_text("üîç –ò—â—É –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ —Ä—è–¥–æ–º...")
            places = await self.api.search(
                "–¥–æ—Å—Ç–æ–ø—Ä–∏–º–µ—á–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏",
                latitude=location.latitude,
                longitude=location.longitude,
                user_id=user_id,
            )

            if not places:
                await update.message.reply_text("üòï –†—è–¥–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã—Ö –º–µ—Å—Ç")
                return

            for place in places[:3]:
                await self._send_place_result(update, place, location)

        except Exception as e:
            logger.error(f"Location search error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ—Å—Ç —Ä—è–¥–æ–º")

    @staticmethod
    def _calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -> float:
        """–í—ã—á–∏—Å–ª—è–µ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        –ø–æ —Ñ–æ—Ä–º—É–ª–µ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤.
        Args:
            lat1 (float): –®–∏—Ä–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
            lon1 (float): –î–æ–ª–≥–æ—Ç–∞ –ø–µ—Ä–≤–æ–π —Ç–æ—á–∫–∏
            lat2 (float): –®–∏—Ä–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏
            lon2 (float): –î–æ–ª–≥–æ—Ç–∞ –≤—Ç–æ—Ä–æ–π —Ç–æ—á–∫–∏

        Returns:
            float: –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –º–µ—Ç—Ä–∞—Ö

        """
        earth_radius_m = 6371000 # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≥—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã
        lat1, lon1, lat2, lon2 = map(radians, [lat1, lon1, lat2, lon2])

        # –†–∞–∑–Ω–∏—Ü–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
        dlat = lat2 - lat1
        dlon = lon2 - lon1

        # –§–æ—Ä–º—É–ª–∞ –≥–∞–≤–µ—Ä—Å–∏–Ω—É—Å–æ–≤
        a = sin(dlat / 2) ** 2 + cos(lat1) * cos(lat2) * sin(dlon / 2) ** 2
        return earth_radius_m * 2 * atan2(sqrt(a), sqrt(1 - a))

    async def _show_history(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user = User.get_or_create(
                telegram_id=update.effective_user.id,
                defaults={
                    "full_name": update.effective_user.full_name,
                    "username": update.effective_user.username,
                },
            )[0]

            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
            history = SearchModel.select().where(
                SearchModel.user == user
            ).order_by(SearchModel.created_at.desc()).limit(10)

            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if not history.exists():
                await update.message.reply_text(
                    "–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø—É—Å—Ç–∞",
                    reply_markup=self._get_main_keyboard()
                )
                return

            response = "üìñ <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞:</b>\n\n"
            for item in history:
                response += f"üîç {item.query}\nüïí {item.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"

            await update.message.reply_text(
                response,
                parse_mode="HTML",
                reply_markup=self._get_main_keyboard()
            )

        except Exception as e:
            logger.error(f"History error: {e}")
            await update.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏",
                reply_markup=self._get_main_keyboard(),
            )

    async def _handle_text_search(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ –º–µ—Å—Ç."""
        query = update.message.text.strip()
        if len(query) < 2:
            await update.message.reply_text("–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π –∑–∞–ø—Ä–æ—Å")
            return

        await update.message.reply_text("üîç –ò—â—É –º–µ—Å—Ç–∞...")

        try:
            user = User.get_or_create(
                telegram_id=update.effective_user.id,
                defaults={
                    "full_name": update.effective_user.full_name,
                    "username": update.effective_user.username,
                },
            )[0]

            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
            places = await self.api.search(query, user_id=user.telegram_id)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ –∏—Å—Ç–æ—Ä–∏—é
            SearchModel.create(
                user=user,
                query=query,
                results_count=len(places) if places else 0,
                created_at=datetime.now(),
                is_location_search=False,
            )

            if not places:
                await update.message.reply_text("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return

            for place in places[:5]:
                await self._send_place_result(update, place)

        except Exception as e:
            logger.error(f"Search error: {e}")
            await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")

    @staticmethod
    def _create_place_keyboard(place_id: str, name: str, is_favorite: bool) -> InlineKeyboardMarkup:
        """ –°–æ–∑–¥–∞–µ—Ç inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–µ—Å—Ç–æ–º.

        Args:
            place_id (str): –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞
            name (str): –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
            is_favorite (bool): –í –∏–∑–±—Ä–∞–Ω–Ω–æ–º –ª–∏ –º–µ—Å—Ç–æ

        Returns:
            InlineKeyboardMarkup: –û–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        """

        buttons = [
            InlineKeyboardButton(
                "üó∫ –ö–∞—Ä—Ç–∞",
                callback_data=f"map:{place_id}"
            ),
            InlineKeyboardButton(
                "‚≠ê –£–¥–∞–ª–∏—Ç—å" if is_favorite else "üåü –î–æ–±–∞–≤–∏—Ç—å",
                callback_data=f"{'unfav' if is_favorite else 'fav'}:{place_id}:{name[:30]}"
            )
        ]
        return InlineKeyboardMarkup([buttons])

    @staticmethod
    def _create_place_keyboard(place_id: str, name: str, is_favorite: bool) -> InlineKeyboardMarkup:
        """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ—Å—Ç–∞.
        Args:
            place_id: –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ "lat,lon"
            name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ (–æ–±—Ä–µ–∑–∞–µ—Ç—Å—è –¥–æ 30 —Å–∏–º–≤–æ–ª–æ–≤)
            is_favorite: –§–ª–∞–≥, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º

        Returns:
            InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏:
                - "üó∫ –ö–∞—Ä—Ç–∞" - –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç –∫–∞—Ä—Ç—É
                - "‚≠ê –£–¥–∞–ª–∏—Ç—å"/"üåü –î–æ–±–∞–≤–∏—Ç—å" - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑–±—Ä–∞–Ω–Ω—ã–º
        """
        buttons = [
            InlineKeyboardButton(
                "üó∫ –ö–∞—Ä—Ç–∞",
                callback_data=f"map:{place_id}"
            ),
            InlineKeyboardButton(
                "‚≠ê –£–¥–∞–ª–∏—Ç—å" if is_favorite else "üåü –î–æ–±–∞–≤–∏—Ç—å",
                callback_data=f"{'unfav' if is_favorite else 'fav'}:{place_id}:{name[:30]}"
            )
        ]
        return InlineKeyboardMarkup([buttons])

    async def _handle_callback_query(self, update: Update, _: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç inline-–∫–Ω–æ–ø–æ–∫ (–∫–∞—Ä—Ç–∞/–∏–∑–±—Ä–∞–Ω–Ω–æ–µ).

        Args:
            update: –û–±—ä–µ–∫—Ç Update –æ—Ç Telegram API
            _: –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–∑–∞–º–µ–Ω–µ–Ω –Ω–∞ _)
        """
        query = update.callback_query
        await query.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–∏—è callback

        try:
            if not query.data:
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç callback –¥–∞–Ω–Ω—ã–µ")

            # –†–∞–∑–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞ "action:param1:param2:..."
            action, *payload = query.data.split(":")

            if action == "map":
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö–∞—Ä—Ç–∞"
                if not payload or len(payload[0].split(",")) != 2:
                    raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç")

                lat, lon = payload[0].split(",")
                await query.message.reply_text(
                    f"üìç –û—Ç–∫—Ä—ã—Ç—å –≤ Google Maps:\nhttps://www.google.com/maps?q={lat},{lon}",
                    disable_web_page_preview=True
                )

            elif action in ("fav", "unfav"):
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
                if not payload:
                    raise ValueError("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ")

                user = User.get(telegram_id=query.from_user.id)
                place_id = payload[0]
                name = ":".join(payload[1:]) if len(payload) > 1 else "–ú–µ—Å—Ç–æ"

                if action == "fav":
                    FavoritePlace.create(
                        user=user,
                        place_id=place_id,
                        name=name,
                        added_at=datetime.now()
                    )
                else:
                    FavoritePlace.delete().where(
                        (FavoritePlace.user == user) &
                        (FavoritePlace.place_id == place_id)
                    ).execute()

                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
                await query.edit_message_reply_markup(
                    reply_markup=self._create_place_keyboard(
                        place_id=place_id,
                        name=name,
                        is_favorite=action == "fav"
                    )
                )

        except ValueError as e:
            logger.warning(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ callback –¥–∞–Ω–Ω—ã–µ: {e}")
            await query.message.reply_text("‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
            await query.message.reply_text(
                "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞",
                reply_markup=self._get_main_keyboard()
            )


    async def _send_place_result(self, update: Update, place: Place, user_location: Optional[Place] = None) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º –º–µ—Å—Ç–µ.

        Args:
            update (Update): –û–±—ä–µ–∫—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram API
            place (Place): –ù–∞–π–¥–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ
            user_location (Optional[Place]): –õ–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
        """

        try:
            user = User.get(telegram_id=update.effective_user.id)

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = (
                f"üìç <b>{place.name}</b>\n"
                f"üìå <i>{place.address}</i>\n"
                f"‚≠ê –†–µ–π—Ç–∏–Ω–≥: {place.rating or '–Ω–µ—Ç'}\n"
            )

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ, –µ—Å–ª–∏ –∏–∑–≤–µ—Å—Ç–Ω–∞ –ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if user_location:
                distance = self._calculate_distance(
                    user_location.latitude,
                    user_location.longitude,
                    place.latitude,
                    place.longitude
                )
                message_text += f"üö∂‚Äç‚ôÇÔ∏è ~{int(distance)} –º –æ—Ç –≤–∞—Å\n"

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            if place.website:
                message_text += f"üåê <a href='{place.website}'>–°–∞–π—Ç</a>\n"
            if place.phone:
                message_text += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {place.phone}\n"

            # –°–æ–∑–¥–∞–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞
            place_id = f"{place.latitude:.6f},{place.longitude:.6f}"

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–µ—Å—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            is_favorite = FavoritePlace.select().where(
                (FavoritePlace.user == user) &
                (FavoritePlace.place_id == place_id)
            ).exists()

            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = self._create_place_keyboard(place_id, place.name, user, is_favorite)

            photo_url = next(
                (p for p in place.photos if isinstance(p, str) and p.startswith(('http://', 'https://'))),
                None
            )

            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ
            if photo_url:
                try:
                    await update.message.reply_photo(
                        photo=photo_url,
                        caption=message_text,
                        reply_markup=keyboard,
                        parse_mode="HTML"
                    )
                    return
                except Exception as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ: {e}")

            # –ï—Å–ª–∏ —Ñ–æ—Ç–æ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            await update.message.reply_text(
                message_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ—Å—Ç–∞: {e}")